% Produced by CVXGEN, 2018-03-14 07:18:32 -0400.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B = params.B;
L_term = params.L_term;
Q = params.Q;
R = params.R;
f_obs_0 = params.f_obs_0;
if isfield(params, 'f_obs_1')
  f_obs_1 = params.f_obs_1;
elseif isfield(params, 'f_obs')
  f_obs_1 = params.f_obs{1};
else
  error 'could not find f_obs_1'
end
if isfield(params, 'f_obs_2')
  f_obs_2 = params.f_obs_2;
elseif isfield(params, 'f_obs')
  f_obs_2 = params.f_obs{2};
else
  error 'could not find f_obs_2'
end
if isfield(params, 'f_obs_3')
  f_obs_3 = params.f_obs_3;
elseif isfield(params, 'f_obs')
  f_obs_3 = params.f_obs{3};
else
  error 'could not find f_obs_3'
end
if isfield(params, 'f_obs_4')
  f_obs_4 = params.f_obs_4;
elseif isfield(params, 'f_obs')
  f_obs_4 = params.f_obs{4};
else
  error 'could not find f_obs_4'
end
if isfield(params, 'f_obs_5')
  f_obs_5 = params.f_obs_5;
elseif isfield(params, 'f_obs')
  f_obs_5 = params.f_obs{5};
else
  error 'could not find f_obs_5'
end
if isfield(params, 'f_obs_6')
  f_obs_6 = params.f_obs_6;
elseif isfield(params, 'f_obs')
  f_obs_6 = params.f_obs{6};
else
  error 'could not find f_obs_6'
end
if isfield(params, 'f_obs_7')
  f_obs_7 = params.f_obs_7;
elseif isfield(params, 'f_obs')
  f_obs_7 = params.f_obs{7};
else
  error 'could not find f_obs_7'
end
if isfield(params, 'f_obs_8')
  f_obs_8 = params.f_obs_8;
elseif isfield(params, 'f_obs')
  f_obs_8 = params.f_obs{8};
else
  error 'could not find f_obs_8'
end
if isfield(params, 'f_obs_9')
  f_obs_9 = params.f_obs_9;
elseif isfield(params, 'f_obs')
  f_obs_9 = params.f_obs{9};
else
  error 'could not find f_obs_9'
end
if isfield(params, 'f_obs_10')
  f_obs_10 = params.f_obs_10;
elseif isfield(params, 'f_obs')
  f_obs_10 = params.f_obs{10};
else
  error 'could not find f_obs_10'
end
if isfield(params, 'f_obs_11')
  f_obs_11 = params.f_obs_11;
elseif isfield(params, 'f_obs')
  f_obs_11 = params.f_obs{11};
else
  error 'could not find f_obs_11'
end
if isfield(params, 'f_obs_12')
  f_obs_12 = params.f_obs_12;
elseif isfield(params, 'f_obs')
  f_obs_12 = params.f_obs{12};
else
  error 'could not find f_obs_12'
end
if isfield(params, 'f_obs_13')
  f_obs_13 = params.f_obs_13;
elseif isfield(params, 'f_obs')
  f_obs_13 = params.f_obs{13};
else
  error 'could not find f_obs_13'
end
if isfield(params, 'f_obs_14')
  f_obs_14 = params.f_obs_14;
elseif isfield(params, 'f_obs')
  f_obs_14 = params.f_obs{14};
else
  error 'could not find f_obs_14'
end
if isfield(params, 'f_obs_15')
  f_obs_15 = params.f_obs_15;
elseif isfield(params, 'f_obs')
  f_obs_15 = params.f_obs{15};
else
  error 'could not find f_obs_15'
end
g = params.g;
theta_mates = params.theta_mates;
u_max = params.u_max;
u_min = params.u_min;
xN = params.xN;
x_0 = params.x_0;
x_max = params.x_max;
x_min = params.x_min;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable u_0(4, 1);
  variable x_16(16, 1);
  variable u_1(4, 1);
  variable u_2(4, 1);
  variable u_3(4, 1);
  variable u_4(4, 1);
  variable u_5(4, 1);
  variable u_6(4, 1);
  variable u_7(4, 1);
  variable u_8(4, 1);
  variable u_9(4, 1);
  variable u_10(4, 1);
  variable u_11(4, 1);
  variable u_12(4, 1);
  variable u_13(4, 1);
  variable u_14(4, 1);
  variable u_15(4, 1);
  variable x_15(16, 1);
  variable x_1(16, 1);
  variable x_2(16, 1);
  variable x_3(16, 1);
  variable x_4(16, 1);
  variable x_5(16, 1);
  variable x_6(16, 1);
  variable x_7(16, 1);
  variable x_8(16, 1);
  variable x_9(16, 1);
  variable x_10(16, 1);
  variable x_11(16, 1);
  variable x_12(16, 1);
  variable x_13(16, 1);
  variable x_14(16, 1);

  minimize(quad_form(u_0 + g + f_obs_0, R) + quad_form(x_16 - xN, L_term) + quad_form(u_1 + g + f_obs_1, R) + quad_form(x_16 - xN, L_term) + quad_form(u_2 + g + f_obs_2, R) + quad_form(x_16 - xN, L_term) + quad_form(u_3 + g + f_obs_3, R) + quad_form(x_16 - xN, L_term) + quad_form(u_4 + g + f_obs_4, R) + quad_form(x_16 - xN, L_term) + quad_form(u_5 + g + f_obs_5, R) + quad_form(x_16 - xN, L_term) + quad_form(u_6 + g + f_obs_6, R) + quad_form(x_16 - xN, L_term) + quad_form(u_7 + g + f_obs_7, R) + quad_form(x_16 - xN, L_term) + quad_form(u_8 + g + f_obs_8, R) + quad_form(x_16 - xN, L_term) + quad_form(u_9 + g + f_obs_9, R) + quad_form(x_16 - xN, L_term) + quad_form(u_10 + g + f_obs_10, R) + quad_form(x_16 - xN, L_term) + quad_form(u_11 + g + f_obs_11, R) + quad_form(x_16 - xN, L_term) + quad_form(u_12 + g + f_obs_12, R) + quad_form(x_16 - xN, L_term) + quad_form(u_13 + g + f_obs_13, R) + quad_form(x_16 - xN, L_term) + quad_form(u_14 + g + f_obs_14, R) + quad_form(x_16 - xN, L_term) + quad_form(u_15 + g + f_obs_15, R) + quad_form(x_16 - xN, L_term) - (x_15(6) - theta_mates')*Q);
  subject to
    x_1 == A*x_0 + B*(u_0 + g + f_obs_0);
    x_2 == A*x_1 + B*(u_1 + g + f_obs_1);
    x_3 == A*x_2 + B*(u_2 + g + f_obs_2);
    x_4 == A*x_3 + B*(u_3 + g + f_obs_3);
    x_5 == A*x_4 + B*(u_4 + g + f_obs_4);
    x_6 == A*x_5 + B*(u_5 + g + f_obs_5);
    x_7 == A*x_6 + B*(u_6 + g + f_obs_6);
    x_8 == A*x_7 + B*(u_7 + g + f_obs_7);
    x_9 == A*x_8 + B*(u_8 + g + f_obs_8);
    x_10 == A*x_9 + B*(u_9 + g + f_obs_9);
    x_11 == A*x_10 + B*(u_10 + g + f_obs_10);
    x_12 == A*x_11 + B*(u_11 + g + f_obs_11);
    x_13 == A*x_12 + B*(u_12 + g + f_obs_12);
    x_14 == A*x_13 + B*(u_13 + g + f_obs_13);
    x_15 == A*x_14 + B*(u_14 + g + f_obs_14);
    x_16 == A*x_15 + B*(u_15 + g + f_obs_15);
    x_min <= x_1;
    x_min <= x_2;
    x_min <= x_3;
    x_min <= x_4;
    x_min <= x_5;
    x_min <= x_6;
    x_min <= x_7;
    x_min <= x_8;
    x_min <= x_9;
    x_min <= x_10;
    x_min <= x_11;
    x_min <= x_12;
    x_min <= x_13;
    x_min <= x_14;
    x_min <= x_15;
    x_min <= x_16;
    x_1 <= x_max;
    x_2 <= x_max;
    x_3 <= x_max;
    x_4 <= x_max;
    x_5 <= x_max;
    x_6 <= x_max;
    x_7 <= x_max;
    x_8 <= x_max;
    x_9 <= x_max;
    x_10 <= x_max;
    x_11 <= x_max;
    x_12 <= x_max;
    x_13 <= x_max;
    x_14 <= x_max;
    x_15 <= x_max;
    x_16 <= x_max;
    u_min <= u_0;
    u_min <= u_1;
    u_min <= u_2;
    u_min <= u_3;
    u_min <= u_4;
    u_min <= u_5;
    u_min <= u_6;
    u_min <= u_7;
    u_min <= u_8;
    u_min <= u_9;
    u_min <= u_10;
    u_min <= u_11;
    u_min <= u_12;
    u_min <= u_13;
    u_min <= u_14;
    u_min <= u_15;
    u_0 <= u_max;
    u_1 <= u_max;
    u_2 <= u_max;
    u_3 <= u_max;
    u_4 <= u_max;
    u_5 <= u_max;
    u_6 <= u_max;
    u_7 <= u_max;
    u_8 <= u_max;
    u_9 <= u_max;
    u_10 <= u_max;
    u_11 <= u_max;
    u_12 <= u_max;
    u_13 <= u_max;
    u_14 <= u_max;
    u_15 <= u_max;
cvx_end
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
vars.u_3 = u_3;
vars.u{3} = u_3;
vars.u_4 = u_4;
vars.u{4} = u_4;
vars.u_5 = u_5;
vars.u{5} = u_5;
vars.u_6 = u_6;
vars.u{6} = u_6;
vars.u_7 = u_7;
vars.u{7} = u_7;
vars.u_8 = u_8;
vars.u{8} = u_8;
vars.u_9 = u_9;
vars.u{9} = u_9;
vars.u_10 = u_10;
vars.u{10} = u_10;
vars.u_11 = u_11;
vars.u{11} = u_11;
vars.u_12 = u_12;
vars.u{12} = u_12;
vars.u_13 = u_13;
vars.u{13} = u_13;
vars.u_14 = u_14;
vars.u{14} = u_14;
vars.u_15 = u_15;
vars.u{15} = u_15;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
vars.x_11 = x_11;
vars.x{11} = x_11;
vars.x_12 = x_12;
vars.x{12} = x_12;
vars.x_13 = x_13;
vars.x{13} = x_13;
vars.x_14 = x_14;
vars.x{14} = x_14;
vars.x_15 = x_15;
vars.x{15} = x_15;
vars.x_16 = x_16;
vars.x{16} = x_16;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
